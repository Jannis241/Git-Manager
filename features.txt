create_repo:
- wo auf dem pc (path)
- public oder private
- name

open config:
- reset
- set username
- set api_key
- set project_path

oder ohne open config zu machen:
- config set username <name>
- config set api_key = <name>
- config set project_path = <path>

- für jeden command ein "help" command einbauen der die
möglichen befehle anzeigt, zb upload --help -> upload all, upload filename
---> das selbe auch wenn man einen invalid command macht wie einfach "upload"

upload:
- upload all --force
- upload xy --force
- commit message adden
- branch name (default ist main)
- zu der upload funktion muss path gegeben werden und nicht name
- gucken falls ein file nicht gefunden wird die groß und 
klein schreibung nur falsch ist -> input und name auf lowercase machen und dann vergleichen

update:
- update all --force
- update xy --force
- branch name (default ist main)
- zu der update funktion muss path gegeben werden und nicht name
- gucken falls ein file nicht gefunden wird die groß und 
klein schreibung nur falsch ist -> input und name auf lowercase machen und dann vergleichen

download:
- optionaler parameter path (wohin es geklont werden soll)
- error messages -> wenn man nur download macht, download sdsdfsdff, download sdfsdf from usw, download all



delete:
- delete folder from pc
- delete repo from acc -> gucken ob es das repo gibtn und ob man owner ist (sonst jeweils richtige error nachricht)
- delete branch -> gucken ob es den branch und das repo gibt
- es muss bestätigt werden falls man etwas löschen will -> bei delete repo wirklich aufpassen
- aufmerksam machen dass bei delete repo wirklich das git repo gelöscht wired und nicht nur das lokale
- lokales löschen irgendwie einfacher machen -> list oder so
also nochmal eine extra abfrage
- error info falls das repo nicht dem user gehört (config file checken)
- gucken ob es das repo überhaupt gibt (git)
- muss checken ob man in einem file ist -> dann kann man direkt delete repo machen oder delete branch xy ohen namen
- bestätigungs nachricht falls das repo gelöscht wurde


create repo:
- name als parameter
- path als optionaler parameter (default ist project folder)
- privacy
- schauen ob es das repo schon gibt auf github
- valid name checken
- repo dann erstellen und direkt clonen
- den path nochmal printen

create branch, repo:
- gucken ob es den branch/repo gibt
- gucken ob man owner ist


migrate:
- gucken ob es schon ein git repo ist
- privacy
- path bleibt gleich 


Generell:
-command info checken -> default / file State / config -> am anfang nur die anzeigen die auch im home verfügbar sind
- vorschläge wenn man ein file falsch schreibt 
- auto completion für befehle
- pull push combi (add, commit, pull --rebase, push)
- git add, commit funktionen adden
- branch merge feature
- switch branch feature
- alle git functions einbauen
- überall die daten eintragen, teilweise sind nur place holder daten, das heißt der richtige api key usw
-überall gucken dass die namen von den rawArgs sind und die commands von den arguements
- die help commands für config file und home verbessern
create repo und branch:
- checken ob es das repo oder den branch schon gibt -> einmal auf git gucken und auf pc